-- Ultimate Full GOD (SIMULATION ONLY) - Safe template
-- Author: @VanDucMCBer (adapted)
-- NOTE: COMPLETELY SAFE: NO teleport, NO remote invokes, NO auto-farm. Purely client-side simulation + UI.

-- REQUIRE: executor with HttpGet support
local ok, OrionLib = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source", true))()
end)
if not ok or not OrionLib then
    error("Failed to load OrionLib. Make sure your executor supports HttpGet and you're online.")
end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

-- Utility safe logger (prints + on-screen notifications)
local function safeLog(title, msg, time)
    print(("[%s] %s"):format(title, tostring(msg)))
    OrionLib:MakeNotification({Name = tostring(title), Content = tostring(msg), Time = time or 3})
end

-- Build UI
local Window = OrionLib:MakeWindow({
    Name = "‚ö° Ultimate Blox Fruits Menu ‚Äî SIM (Full GOD Template)",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "UBF_FullSim"
})

-- Tabs
local InfoTab   = Window:MakeTab({Name = "Th√¥ng tin", Icon = "rbxassetid://4483345998"})
local TeleTab   = Window:MakeTab({Name = "Teleport (Sim)", Icon = "rbxassetid://6035067836"})
local AutoTab   = Window:MakeTab({Name = "Auto (Sim)", Icon = "rbxassetid://6034684949"})
local BossTab   = Window:MakeTab({Name = "Boss (Sim)", Icon = "rbxassetid://6034989559"})
local RaidTab   = Window:MakeTab({Name = "Raid (Sim)", Icon = "rbxassetid://6034767619"})
local StatsTab  = Window:MakeTab({Name = "Stats (Sim)", Icon = "rbxassetid://6035078894"})
local ExtraTab  = Window:MakeTab({Name = "Extra (Sim)", Icon = "rbxassetid://6034509993"})
local TradeTab  = Window:MakeTab({Name = "Trade (Sim)", Icon = "rbxassetid://6035050000"})

-- Info displays
local loadPara = InfoTab:AddParagraph("‚è≥ Loader", "Pending...")
local playerPara = InfoTab:AddParagraph("üë§ Ng∆∞·ªùi ch∆°i", "Kh√¥ng c√≥ d·ªØ li·ªáu")
local statsPara  = InfoTab:AddParagraph("üìä Stats (local)", "‚Äî")
local posPara    = InfoTab:AddParagraph("üìç V·ªã tr√≠ (local)", "‚Äî")
local fruitPara  = InfoTab:AddParagraph("üçè Fruit (local)", "Ch∆∞a bi·∫øt")
local logBox     = InfoTab:AddParagraph("üìú Log (recent)", "S·∫µn s√†ng")

local function appendLogLine(line)
    -- keep few last lines
    local cur = logBox:Get()
    local text = tostring(line)
    local combined = cur .. "\n" .. text
    -- trim to ~8 lines
    local lines = {}
    for s in combined:gmatch("[^\n]+") do table.insert(lines, s) end
    if #lines > 8 then
        local start = #lines - 7
        local sliced = {}
        for i = start, #lines do table.insert(sliced, lines[i]) end
        combined = table.concat(sliced, "\n")
    end
    logBox:Set("üìú Log (recent)", combined)
end

-- Simple terminal-like loader bar
local function setLoader(pct, msg)
    pct = math.clamp(pct, 0, 100)
    local width = 24
    local filled = math.floor(pct/100 * width)
    local bar = string.rep("=", filled) .. string.rep(" ", width - filled)
    local text = ("[%s] %3d%%  %s"):format(bar, pct, msg or "")
    loadPara:Set("‚è≥ Loader", text)
    appendLogLine("[Loader] "..text)
end

-- Simulated sequential loading steps
task.spawn(function()
    local steps = {
        {10, "Loading core UI..."},
        {25, "Preparing tabs..."},
        {40, "Binding safe events..."},
        {55, "Scanning local player data..."},
        {70, "Preparing simulators (Quest/Mastery/Boss)..."},
        {85, "Finalizing Extra features..."},
        {100, "Ready ‚Äî Simulation mode active."}
    }
    for _, s in ipairs(steps) do
        for p = (s[1]-6), s[1], 1 do
            setLoader(math.clamp(p,0,100), s[2])
            task.wait(0.02)
        end
        setLoader(s[1], s[2])
        task.wait(0.06)
    end
    safeLog("SYSTEM", "Full SIM UI ready", 4)
end)

-- Realtime local info updater (reads client-only safely)
task.spawn(function()
    while task.wait(0.8) do
        if LocalPlayer then
            local name = LocalPlayer.Name or "Player"
            local level = "?"
            pcall(function() if LocalPlayer:FindFirstChild("Data") and LocalPlayer.Data:FindFirstChild("Level") then level = LocalPlayer.Data.Level.Value end end)
            playerPara:Set("üë§ Ng∆∞·ªùi ch∆°i", "T√™n: "..tostring(name) .. "\nLevel: "..tostring(level))
            local hpmax = "?"
            local pos = "?"
            pcall(function()
                if LocalPlayer.Character then
                    local hum = LocalPlayer.Character:FindFirstChild("Humanoid")
                    if hum then hpmax = tostring(math.floor(hum.Health)).."/"..tostring(math.floor(hum.MaxHealth)) end
                    local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        local p = hrp.Position
                        pos = ("X:%d Y:%d Z:%d"):format(math.floor(p.X), math.floor(p.Y), math.floor(p.Z))
                    end
                end
            end)
            statsPara:Set("üìä Stats (local)", "HP: "..hpmax)
            posPara:Set("üìç V·ªã tr√≠ (local)", pos)
            local fruit = "Ch∆∞a ƒÉn"
            pcall(function() if LocalPlayer:FindFirstChild("Data") and LocalPlayer.Data:FindFirstChild("DevilFruit") then fruit = LocalPlayer.Data.DevilFruit.Value end end)
            fruitPara:Set("üçè Fruit (local)", tostring(fruit))
        end
    end
end)

-- ======= TELEPORT (SIM) =======
local teleLocations = {
    "Start Island","Marine Starter","Middle Town","Jungle","Desert","Sky Island",
    "Colosseum","Prison","Ice Island","Second Sea","Third Sea","Raid Room"
}
local selTele = teleLocations[1]
TeleTab:AddDropdown({Name="Ch·ªçn ƒë·ªãa ƒëi·ªÉm (Sim)", Default=selTele, Options=teleLocations, Callback=function(v) selTele=v end})
TeleTab:AddButton({Name="Simulate Teleport", Callback=function()
    safeLog("TELEPORT-SIM", "Requested simulate teleport -> "..tostring(selTele), 3)
    setLoader(50, "Simulating teleport: "..tostring(selTele))
end})
TeleTab:AddLabel("L∆∞u √Ω: ƒê√¢y l√† m√¥ ph·ªèng ‚Äî kh√¥ng thay ƒë·ªïi v·ªã tr√≠ b·∫°n trong game.")

-- ======= AUTO (SIM) =======
local sim = {
    AutoQuest=false,
    AutoMastery=false,
    AutoHaki=false,
    AutoChest=false,
    AutoFruit=false,
    AutoStore=false,
    AutoBuyRandom=false,
    AutoBuySelected=false
}
AutoTab:AddToggle({Name="üìú Auto Quest (Sim)", Default=false, Callback=function(v) sim.AutoQuest=v; safeLog("AutoSim","Auto Quest "..(v and "ON" or "OFF")) end})
AutoTab:AddToggle({Name="üî• Auto Mastery (Sim)", Default=false, Callback=function(v) sim.AutoMastery=v; safeLog("AutoSim","Auto Mastery "..(v and "ON" or "OFF")) end})
AutoTab:AddToggle({Name="üí• Auto Haki (Sim)", Default=false, Callback=function(v) sim.AutoHaki=v; safeLog("AutoSim","Auto Haki "..(v and "ON" or "OFF")) end})
AutoTab:AddToggle({Name="üí∞ Auto Chest (Sim)", Default=false, Callback=function(v) sim.AutoChest=v; safeLog("AutoSim","Auto Chest "..(v and "ON" or "OFF")) end})
AutoTab:AddToggle({Name="üçè Auto Collect Fruit (Sim)", Default=false, Callback=function(v) sim.AutoFruit=v; safeLog("AutoSim","Auto Fruit "..(v and "ON" or "OFF")) end})
AutoTab:AddToggle({Name="üì¶ Auto Store Fruit (Sim)", Default=false, Callback=function(v) sim.AutoStore=v; safeLog("AutoSim","Auto Store "..(v and "ON" or "OFF")) end})
AutoTab:AddToggle({Name="üé≤ Auto Buy Random (Sim)", Default=false, Callback=function(v) sim.AutoBuyRandom=v; safeLog("AutoSim","Auto Buy Random "..(v and "ON" or "OFF")) end})

local buyOptions = {"Flame","Ice","Dark","Magma","Quake","Rumble","String"}
local selBuy = buyOptions[1]
AutoTab:AddDropdown({Name="Ch·ªçn Fruit ƒë·ªÉ Auto Buy (Sim)", Default=selBuy, Options=buyOptions, Callback=function(v) selBuy=v end})
AutoTab:AddToggle({Name="üõí Auto Buy Selected (Sim)", Default=false, Callback=function(v) sim.AutoBuySelected=v; safeLog("AutoSim","Auto Buy Selected "..(v and "ON" or "OFF").." -> "..tostring(selBuy)) end})

-- background "simulator" that only logs; it DOES NOT perform game changes
task.spawn(function()
    while task.wait(1.5) do
        if sim.AutoQuest then appendLogLine("[Sim] AutoQuest tick ‚Äî scanning quests (sim)") end
        if sim.AutoMastery then appendLogLine("[Sim] AutoMastery tick ‚Äî training (sim)") end
        if sim.AutoHaki then appendLogLine("[Sim] AutoHaki tick ‚Äî ensure Buso (sim)") end
        if sim.AutoChest then appendLogLine("[Sim] AutoChest tick ‚Äî scanning chests (sim)") end
        if sim.AutoFruit then appendLogLine("[Sim] AutoFruit tick ‚Äî scanning fruits (sim)") end
        if sim.AutoStore then appendLogLine("[Sim] AutoStore tick ‚Äî storing to vault (sim)") end
        if sim.AutoBuyRandom then appendLogLine("[Sim] AutoBuyRand tick ‚Äî requesting random buy (sim)") end
        if sim.AutoBuySelected then appendLogLine("[Sim] AutoBuySel tick ‚Äî attempting buy "..tostring(selBuy).." (sim)") end
    end
end)

-- ======= BOSS (SIM) =======
local bossList = {"Saber Expert","Ice Admiral","Magma Admiral","Don Swan","Cursed Captain","Stone","Smoke Admiral","Flamingo"}
local selBoss = bossList[1]
BossTab:AddDropdown({Name="Ch·ªçn Boss (Sim)", Default=selBoss, Options=bossList, Callback=function(v) selBoss=v end})
BossTab:AddButton({Name="Simulate Farm Boss", Callback=function()
    safeLog("BOSS-SIM", "Simulate start farming boss: "..tostring(selBoss), 4)
    setLoader(80, "Simulating boss farm: "..tostring(selBoss))
end})

-- ======= RAID / AWAKEN (SIM) =======
local raidFruits = {"Flame","Ice","Dark","Light","Rumble","Quake","Magma","String"}
local selRaidFruit = raidFruits[1]
RaidTab:AddDropdown({Name="Ch·ªçn Raid Fruit (Sim)", Default=selRaidFruit, Options=raidFruits, Callback=function(v) selRaidFruit=v end})
RaidTab:AddButton({Name="Simulate Start Raid", Callback=function()
    safeLog("RAID-SIM", "Simulate raid for: "..tostring(selRaidFruit), 4)
    setLoader(92, "Simulating raid: "..tostring(selRaidFruit))
end})
RaidTab:AddButton({Name="Simulate Awaken", Callback=function()
    safeLog("RAID-SIM", "Simulate awaken sequence (sim)", 3)
    setLoader(98, "Simulating awaken...")
end})

-- ======= STATS (SIM) =======
local statOptions = {"Melee","Defense","Sword","Gun","Demon Fruit"}
local selStat = statOptions[1]
StatsTab:AddDropdown({Name="Ch·ªçn Stat (Sim)", Default=selStat, Options=statOptions, Callback=function(v) selStat=v end})
StatsTab:AddSlider({Name="S·ªë ƒëi·ªÉm m·ªói l·∫ßn (Sim)", Min=1, Max=10, Default=1, Increment=1, Callback=function(v) appendLogLine("[Sim] Chosen add points: "..tostring(v)) end})
StatsTab:AddButton({Name="Simulate Add Points", Callback=function()
    safeLog("STATS-SIM", "Simulate add points to "..tostring(selStat), 3)
end})

-- ======= EXTRA (SIM) =======
local extraFlags = {Chest=false, Fruit=false, Store=false, BuyRand=false, BuySel=false}
ExtraTab:AddToggle({Name="üí∞ Auto Chest (Sim)", Default=false, Callback=function(v) extraFlags.Chest=v; safeLog("EXTRA","AutoChest (sim): "..tostring(v)) end})
ExtraTab:AddToggle({Name="üçè Auto Collect Fruit (Sim)", Default=false, Callback=function(v) extraFlags.Fruit=v; safeLog("EXTRA","AutoFruit (sim): "..tostring(v)) end})
ExtraTab:AddToggle({Name="üì¶ Auto Store Fruit (Sim)", Default=false, Callback=function(v) extraFlags.Store=v; safeLog("EXTRA","AutoStore (sim): "..tostring(v)) end})
ExtraTab:AddToggle({Name="üé≤ Auto Buy Random (Sim)", Default=false, Callback=function(v) extraFlags.BuyRand=v; safeLog("EXTRA","AutoBuyRandom (sim): "..tostring(v)) end})
ExtraTab:AddDropdown({Name="Ch·ªçn Fruit (Sim)", Default=buyOptions[1], Options=buyOptions, Callback=function(v) selBuy=v end})
ExtraTab:AddToggle({Name="üõí Auto Buy Selected (Sim)", Default=false, Callback=function(v) extraFlags.BuySel=v; safeLog("EXTRA","AutoBuySelected (sim): "..tostring(v).." -> "..tostring(selBuy)) end})
ExtraTab:AddButton({Name="Simulate Extra Action", Callback=function()
    safeLog("EXTRA", ("Sim Flags ‚Äî Chest:%s Fruit:%s Store:%s BuyRand:%s BuySel:%s(%s)")
        :format(tostring(extraFlags.Chest), tostring(extraFlags.Fruit), tostring(extraFlags.Store),
                tostring(extraFlags.BuyRand), tostring(extraFlags.BuySel), tostring(selBuy)), 4)
end})

-- ======= TRADE (SIM) =======
local tradeTarget = ""
TradeTab:AddTextbox({Name="Target Player (Sim)", Text="", Placeholder="PlayerName", Callback=function(v) tradeTarget=v end})
TradeTab:AddButton({Name="Simulate Trade Offer", Callback=function()
    if tradeTarget == "" then safeLog("TRADE-SIM","Please enter a target player name (sim).",3) return end
    safeLog("TRADE-SIM","Simulate sending trade offer to: "..tostring(tradeTarget),4)
end})
TradeTab:AddButton({Name="Simulate Accept Trade", Callback=function() safeLog("TRADE-SIM","Simulate accepting trade (sim)",3) end})

-- ======= UI Bind =======
InfoTab:AddBind({Name="üîë Toggle UI", Default=Enum.KeyCode.RightControl, Hold=false, Callback=function() OrionLib:ToggleUI() end})

-- Finalize UI
OrionLib:Init()
safeLog("SYSTEM", "Ultimate Full GOD (SIM) loaded. All actions are simulated only.", 5)

-- Helpful tip print
print("=== Ultimate Full GOD (SIM) loaded ===")
print("This template is SAFE: it will NOT change the game state. Use it to test UI and logic.")
